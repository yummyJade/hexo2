{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"yummyJade","url":"http://yoursite.com","root":"/"},"pages":[{"title":"notes","date":"2019-09-10T18:52:26.000Z","updated":"2019-09-10T18:52:26.731Z","comments":true,"path":"notes/index.html","permalink":"http://yoursite.com/notes/index.html","excerpt":"","text":""},{"title":"essays","date":"2019-09-11T01:34:32.000Z","updated":"2019-09-11T01:34:51.711Z","comments":true,"path":"essays/index.html","permalink":"http://yoursite.com/essays/index.html","excerpt":"","text":""}],"posts":[{"title":"react学习之js-xlsx导入和导出excel表格","slug":"react学习之js-xlsx导入和导出excel表格","date":"2019-09-11T01:19:18.000Z","updated":"2019-09-11T01:29:18.586Z","comments":true,"path":"2019/09/11/react学习之js-xlsx导入和导出excel表格/","link":"","permalink":"http://yoursite.com/2019/09/11/react学习之js-xlsx导入和导出excel表格/","excerpt":"最近发现网上关于react导入导出xlsx的资源过少，特意整理出来","text":"最近发现网上关于react导入导出xlsx的资源过少，特意整理出来 项目需求，需要导入和导出表单，发现前端已经强大到无所不能（可惜我有点懒，学的并不勤快）因此使用到js-xlsx，附上github地址:https://github.com/SheetJS/js-xlsx 导入表单1.控制台安装 1$ npm install xlsx 2.在js文件中引入 123import XLSX from 'xlsx';import ExcelUtil from '../../utils/excelUtil'; //注：excelUtil.js是我自定义的关于表单的操作模块 3.函数声明 1234567891011121314151617181920212223242526272829303132function importExcel(file)&#123; // 获取上传的文件对象 const &#123; files &#125; = file.target; // 通过FileReader对象读取文件 const fileReader = new FileReader(); fileReader.onload = event =&gt; &#123; try &#123; const &#123; result &#125; = event.target; // 以二进制流方式读取得到整份excel表格对象 const workbook = XLSX.read(result, &#123; type: 'binary' &#125;); let data = []; // 存储获取到的数据 // 遍历每张工作表进行读取（这里默认只读取第一张表） for (const sheet in workbook.Sheets) &#123; if (workbook.Sheets.hasOwnProperty(sheet)) &#123; // 利用 sheet_to_json 方法将 excel 转成 json 数据 data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet])); // break; // 如果只取第一张表，就取消注释这行 &#125; &#125; console.log(data); &#125; catch (e) &#123; // 这里可以抛出文件类型错误不正确的相关提示 console.log('文件类型不正确'); return; &#125; &#125;; // 以二进制方式打开文件 fileReader.readAsBinaryString(files[0]);&#125; 4.使用 1&lt;input type='file' accept='.xlsx, .xls' onChange=&#123;(e)=&gt;&#123;ExcelUtil.importExcel(e)&#125; &#125;/&gt; 5.结果控制台打印出结果： 导出表单第一第二步同上 3.函数声明 1234567891011121314151617181920212223242526272829303132333435363738function exportExcel(headers, data, fileName = '请假记录表.xlsx') &#123; const _headers = headers .map((item, i) =&gt; Object.assign(&#123;&#125;, &#123; key: item.key, title: item.title, position: String.fromCharCode(65 + i) + 1 &#125;)) .reduce((prev, next) =&gt; Object.assign(&#123;&#125;, prev, &#123; [next.position]: &#123; key: next.key, v: next.title &#125; &#125;), &#123;&#125;); const _data = data .map((item, i) =&gt; headers.map((key, j) =&gt; Object.assign(&#123;&#125;, &#123; content: item[key.key], position: String.fromCharCode(65 + j) + (i + 2) &#125;))) // 对刚才的结果进行降维处理（二维数组变成一维数组） .reduce((prev, next) =&gt; prev.concat(next)) // 转换成 worksheet 需要的结构 .reduce((prev, next) =&gt; Object.assign(&#123;&#125;, prev, &#123; [next.position]: &#123; v: next.content &#125; &#125;), &#123;&#125;); // 合并 headers 和 data const output = Object.assign(&#123;&#125;, _headers, _data); // 获取所有单元格的位置 const outputPos = Object.keys(output); // 计算出范围 ,[\"A1\",..., \"H2\"] const ref = `$&#123;outputPos[0]&#125;:$&#123;outputPos[outputPos.length - 1]&#125;`; // 构建 workbook 对象 const wb = &#123; SheetNames: ['mySheet'], Sheets: &#123; mySheet: Object.assign( &#123;&#125;, output, &#123; '!ref': ref, '!cols': [&#123; wpx: 45 &#125;, &#123; wpx: 100 &#125;, &#123; wpx: 200 &#125;, &#123; wpx: 80 &#125;, &#123; wpx: 150 &#125;, &#123; wpx: 100 &#125;, &#123; wpx: 300 &#125;, &#123; wpx: 300 &#125;], &#125;, ), &#125;, &#125;; // 导出 Excel XLSX.writeFile(wb, fileName);&#125; 4.定义表头和数据项 1234567891011121314151617181920212223242526272829const initColumn = [&#123; title: '姓名', dataIndex: 'name', key: 'name', className: 'text-monospace', &#125;, &#123; title: '年级', dataIndex: 'grade', key: 'grade', &#125;, &#123; title: '部门', dataIndex: 'department', key: 'department', &#125;];let attendanceInfoList = [ &#123; name:\"张三\", grade:\"2017级\", department:\"前端部门\" &#125;, &#123; name:\"李四\", grade:\"2017级\", department:\"程序部门\" &#125;]; 5.使用 1&lt;button type=\"primary\" onClick=&#123;() =&gt; &#123;ExcelUtil.exportExcel(initColumn, attendanceInfoList,\"人员名单.xlsx\")&#125;&#125;&gt;导出&lt;/button&gt; 6.结果 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172//excelUtil.jsimport XLSX from 'xlsx';import React,&#123;useState,useEffect&#125; from 'react';function importExcel(file)&#123; // 获取上传的文件对象 const &#123; files &#125; = file.target; // 通过FileReader对象读取文件 const fileReader = new FileReader(); fileReader.onload = event =&gt; &#123; try &#123; const &#123; result &#125; = event.target; // 以二进制流方式读取得到整份excel表格对象 const workbook = XLSX.read(result, &#123; type: 'binary' &#125;); let data = []; // 存储获取到的数据 // 遍历每张工作表进行读取（这里默认只读取第一张表） for (const sheet in workbook.Sheets) &#123; if (workbook.Sheets.hasOwnProperty(sheet)) &#123; // 利用 sheet_to_json 方法将 excel 转成 json 数据 data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet])); // break; // 如果只取第一张表，就取消注释这行 &#125; &#125; console.log(data); &#125; catch (e) &#123; // 这里可以抛出文件类型错误不正确的相关提示 console.log('文件类型不正确'); return; &#125; &#125;; // 以二进制方式打开文件 fileReader.readAsBinaryString(files[0]);&#125;function exportExcel(headers, data, fileName = '请假记录表.xlsx') &#123; const _headers = headers .map((item, i) =&gt; Object.assign(&#123;&#125;, &#123; key: item.key, title: item.title, position: String.fromCharCode(65 + i) + 1 &#125;)) .reduce((prev, next) =&gt; Object.assign(&#123;&#125;, prev, &#123; [next.position]: &#123; key: next.key, v: next.title &#125; &#125;), &#123;&#125;); const _data = data .map((item, i) =&gt; headers.map((key, j) =&gt; Object.assign(&#123;&#125;, &#123; content: item[key.key], position: String.fromCharCode(65 + j) + (i + 2) &#125;))) // 对刚才的结果进行降维处理（二维数组变成一维数组） .reduce((prev, next) =&gt; prev.concat(next)) // 转换成 worksheet 需要的结构 .reduce((prev, next) =&gt; Object.assign(&#123;&#125;, prev, &#123; [next.position]: &#123; v: next.content &#125; &#125;), &#123;&#125;); // 合并 headers 和 data const output = Object.assign(&#123;&#125;, _headers, _data); // 获取所有单元格的位置 const outputPos = Object.keys(output); // 计算出范围 ,[\"A1\",..., \"H2\"] const ref = `$&#123;outputPos[0]&#125;:$&#123;outputPos[outputPos.length - 1]&#125;`; // 构建 workbook 对象 const wb = &#123; SheetNames: ['mySheet'], Sheets: &#123; mySheet: Object.assign( &#123;&#125;, output, &#123; '!ref': ref, '!cols': [&#123; wpx: 45 &#125;, &#123; wpx: 100 &#125;, &#123; wpx: 200 &#125;, &#123; wpx: 80 &#125;, &#123; wpx: 150 &#125;, &#123; wpx: 100 &#125;, &#123; wpx: 300 &#125;, &#123; wpx: 300 &#125;], &#125;, ), &#125;, &#125;; // 导出 Excel XLSX.writeFile(wb, fileName);&#125;export default &#123;importExcel,exportExcel&#125;;","categories":[],"tags":[{"name":"react","slug":"react","permalink":"http://yoursite.com/tags/react/"},{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]}]}